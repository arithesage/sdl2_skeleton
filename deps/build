#!/bin/bash

SCRIPT_DIR=$(realpath $(dirname $0))
ROOT="${SCRIPT_DIR}"




# Include all .cpp files that needs building
#
# Example
# LIBS=("Log/Log.cpp")
# LIBS+=("StringHelpers/StringHelpers.cpp")
LIBS=("ANSI/ANSI.cpp")
LIBS+=("StringHelpers/StringHelpers.cpp")
LIBS+=("Log/Log.cpp")

# Any required flags
BUILD_FLAGS=""

# Example
# BUILD_FLAGS="-std=c++17"

# Example
# LIBS=("SystemHelpers/SystemHelpers.cpp")
# LIBS+=("StringHelpers/StringHelpers.cpp")




OBJS="${ROOT}/obj"

# Includes deps folder in the header search paths
INCLUDE="-I ${ROOT} "

# Includes each lib folder in the header search paths
for lib in "${LIBS[@]}"
do
    INCLUDE+="-I $(dirname ${ROOT}/${lib}) "
done

# Start with a clean obj folder
if [ -d "$OBJS" ];
then
    rm -r "$OBJS"
fi

mkdir -p "$OBJS"


echo "Building libs ..."
echo "-----------------"
echo ""

for lib in "${LIBS[@]}"
do
    lib_path="${ROOT}/${lib}"
    lib_dir="$(dirname ${lib_path})"
    lib="$(basename ${lib})"

    echo "Entering ${lib_dir} ..."
    echo ""

    cd "${lib_dir}"
    clang++ -c ${lib} -o "${OBJS}/$(basename ${lib} .cpp).o" ${INCLUDE} ${BUILD_FLAGS}

    if ! [ "$?" == "0" ];
    then
        echo ""
        echo "Build failed."
        echo ""
        exit 1
    fi

    cd "${ROOT}"
done

echo ""
echo "All libs are built."
echo ""
